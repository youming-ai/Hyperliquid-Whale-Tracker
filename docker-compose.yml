version: '3.8'

services:
  # =============================================================================
  # Infrastructure Services
  # =============================================================================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hyperdash-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: hyperdash
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/api-gateway/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - hyperdash-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # ClickHouse Database
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: hyperdash-clickhouse
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: hyperdash
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ''
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - '8123:8123' # HTTP interface
      - '9000:9000' # Native interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./infrastructure/clickhouse/config.xml:/etc/clickhouse-server/config.d/config.xml
    networks:
      - hyperdash-network
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:8123/ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hyperdash-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ""
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - hyperdash-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: hyperdash-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - hyperdash-network
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '2181']
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: hyperdash-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - '9092:9092'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - hyperdash-network
    healthcheck:
      test: ['CMD', 'kafka-broker-api-versions', '--bootstrap-server', 'localhost:9092']
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # Application Services
  # =============================================================================

  # API Gateway
  api-gateway:
    build:
      context: ./apps/api-gateway
      dockerfile: Dockerfile
    container_name: hyperdash-api-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: hyperdash
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: dev-jwt-secret-key-not-for-production
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hyperdash-network
    volumes:
      - ./apps/api-gateway:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'node', 'healthcheck.js']
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Application
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: hyperdash-web
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXT_PUBLIC_WS_URL: ws://localhost:3000
    ports:
      - '3001:3001'
    depends_on:
      - api-gateway
    networks:
      - hyperdash-network
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/api/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Ingestion Service
  data-ingestion:
    build:
      context: ./apps/data-ingestion
      dockerfile: Dockerfile
    container_name: hyperdash-data-ingestion
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3003
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: hyperdash
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ''
      KAFKA_BROKERS: kafka:9092
      REDIS_URL: redis://redis:6379
      HYPERLIQUID_API_URL: https://api.hyperliquid.xyz/info
      HYPERLIQUID_WS_URL: wss://api.hyperliquid.xyz/ws
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hyperdash-network
    volumes:
      - ./apps/data-ingestion:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'node', 'healthcheck.js']
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  analytics:
    build:
      context: ./apps/analytics
      dockerfile: Dockerfile
    container_name: hyperdash-analytics
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3004
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: hyperdash
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ''
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: hyperdash
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_URL: redis://redis:6379
    depends_on:
      clickhouse:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hyperdash-network
    volumes:
      - ./apps/analytics:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'node', 'healthcheck.js']
      interval: 30s
      timeout: 10s
      retries: 3

  # Billing Service
  billing:
    build:
      context: ./apps/billing
      dockerfile: Dockerfile
    container_name: hyperdash-billing
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3005
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: hyperdash
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_URL: redis://redis:6379
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_your_stripe_secret_key_here}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-whsec_your_webhook_secret_here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hyperdash-network
    volumes:
      - ./apps/billing:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'node', 'healthcheck.js']
      interval: 30s
      timeout: 10s
      retries: 3

  # Copy Engine Service (Go)
  copy-engine:
    build:
      context: ./apps/copy-engine
      dockerfile: Dockerfile
    container_name: hyperdash-copy-engine
    restart: unless-stopped
    environment:
      PORT: 3006
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: hyperdash
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ''
      KAFKA_BROKERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hyperdash-network
    volumes:
      - ./apps/copy-engine:/app
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3006/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Development Tools
  # =============================================================================

  # PgAdmin (PostgreSQL Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: hyperdash-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@hyperdash.io
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '8080:80'
    depends_on:
      - postgres
    networks:
      - hyperdash-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: hyperdash-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - '8081:8081'
    depends_on:
      - redis
    networks:
      - hyperdash-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: hyperdash-kafka-ui
    restart: unless-stopped
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - '8082:8080'
    depends_on:
      - kafka
      - zookeeper
    networks:
      - hyperdash-network

  # ClickHouse Client
  clickhouse-client:
    image: clickhouse/clickhouse-client:latest
    container_name: hyperdash-clickhouse-client
    restart: unless-stopped
    depends_on:
      - clickhouse
    networks:
      - hyperdash-network
    profiles:
      - tools

  # =============================================================================
  # Monitoring (Optional)
  # =============================================================================

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hyperdash-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - hyperdash-network
    profiles:
      - monitoring

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: hyperdash-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - '3002:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - hyperdash-network
    profiles:
      - monitoring

# =============================================================================
# Networks
# =============================================================================

networks:
  hyperdash-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================

volumes:
  postgres_data:
    driver: local
  clickhouse_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
